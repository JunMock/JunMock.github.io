{"componentChunkName":"component---src-templates-post-template-js","path":"/JPA(Java_Persistence_API)/","result":{"data":{"post":{"id":"bc61de02-80f0-560c-baf2-64b9be1a5672","html":"<h2>JPA(Java Persistence API)</h2>\n<blockquote>\n<p>위키백과 - JPA</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자바 퍼시스턴스 API또는 자바 지속성 API(Java Persistence API, JPA)는 자바 플랫폼 SE와 자바 플랫폼 EE를 사용하는 응용프로그램에서 관계형 데이터베이스의 관리를 표현하는 자바 API이다.</code></pre></div>\n<p>MyBatis 와 같은 SQL맵퍼(ORM이 아니다.)를 이용한 데이터 베이스 쿼리를 사용하였을때 SQL을 다루는 시간이 증가.</p>\n<p>테이블 모델링에 집중하고 객체를 테이블에 맞추어 데이터 전달 역할만 하는 개발을 피하자.</p>\n<p>객체 지향적인 프로그래밍을 하고 JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성.</p>\n<p>SQL에 종속정인 개발을 하지 않아도 된다.</p>\n<h3>JPA의 장점</h3>\n<ul>\n<li>CRUD쿼리를 직접 작성할 필요가없다.</li>\n<li>\n<p>객체지향 프로그래밍을 쉽게 할 수 있다.</p>\n<ul>\n<li>부모-자식 관계 표현</li>\n<li>1:N관계 표현</li>\n<li>상태와 행위를 한 곳에서 관리하는 등</li>\n</ul>\n</li>\n<li>Object와 RDB사이의 페러다임 불일치 해결</li>\n</ul>\n<h3>JPA의 구현체</h3>\n<ul>\n<li>Hibernate</li>\n</ul>","fields":{"slug":"/JPA(Java_Persistence_API)/","prefix":"2021-5-24"},"frontmatter":{"title":"JPA(Java Persistence API)","author":"JunMock Kim","category":"자바API","cover":{"childImageSharp":{"resize":{"src":"/static/640ddf0a281bef540a5607dbc77ead33/9dc27/title.jpg"}}}}},"authornote":{"id":"612c5019-2e65-58fc-8f4f-00508f8a5264","html":"<p>개발자를 준비중입니다.<br>\njava kotlin Spring Vue WebRtc 를 공부하고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"652173235373632"}}}},"pageContext":{"slug":"/JPA(Java_Persistence_API)/","prev":{"id":"6df0e171-6e72-5793-b393-183784e7121b","fields":{"slug":"/버그,오류(에러),예외,경고/","prefix":"2021-05-20","source":"posts"},"frontmatter":{"title":"버그,오류(에러),예외,경고","category":"개발지식"}},"source":"posts"}}}