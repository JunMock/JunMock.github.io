<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[JunMock's Blog]]></title><description><![CDATA[정리에 공유를 곁들인]]></description><link>https://junmock.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 02 Oct 2021 06:29:25 GMT</lastBuildDate><item><title><![CDATA[자료구조 - Data Structure]]></title><description><![CDATA[…]]></description><link>https://junmock.github.io/자료구조 - Data Structure/</link><guid isPermaLink="false">https://junmock.github.io/자료구조 - Data Structure/</guid><pubDate>Fri, 01 Oct 2021 18:20:55 GMT</pubDate><content:encoded>&lt;h2&gt;자료구조&lt;/h2&gt;
&lt;p&gt;자료구조란 다음과 같은 &lt;code class=&quot;language-text&quot;&gt;특성&lt;/code&gt;을 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 효율적으로 &lt;code class=&quot;language-text&quot;&gt;관리&lt;/code&gt;(접근, 수정, 저장, 삭제) 할 수 있는 구조&lt;/li&gt;
&lt;li&gt;효율적인 데이터 처리를 위한 &lt;code class=&quot;language-text&quot;&gt;특성에 따른&lt;/code&gt; 체계적인 구조화&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;자료 구조의 올바른 선택은 효율적인 알고리즘(시간, 공간 복잡도)을 구현을 할 수 있게 한다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자료구조는 크게 구현체를 이용한 선형, 비선형 구조로 분류 된다.&lt;/p&gt;
&lt;h3&gt;구현체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배열(Array)&lt;/li&gt;
&lt;li&gt;튜플(Tuple)&lt;/li&gt;
&lt;li&gt;연결리스트(Linked List)&lt;/li&gt;
&lt;li&gt;해시 테이블(Hash Table)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;선형 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;스택&lt;/li&gt;
&lt;li&gt;큐&lt;/li&gt;
&lt;li&gt;우선순위 큐&lt;/li&gt;
&lt;li&gt;덱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;비선형 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;그래프&lt;/li&gt;
&lt;li&gt;트리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등이 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;컬랙션 프레임 워크&lt;/h2&gt;
&lt;p&gt;자바에서는 &lt;code class=&quot;language-text&quot;&gt;컬랙션 프레임워크&lt;/code&gt;를 통해 대부분의 자료구조를 구현 할 수 있다.&lt;/p&gt;
&lt;p&gt;컬랙션 프레임워크는 크게 3가지의 인터페이스로 정의 되어있고&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;List와 Set는 Collection 인터페이스를 상속 받지만,
Map의 경우 구조적인 차이(Key,velue)로 인해 개별적으로 정의 되어있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;종류&lt;/th&gt;
&lt;th&gt;특징 및 설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;List&lt;/td&gt;
&lt;td&gt;순서 O 데이터의 중복 O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set&lt;/td&gt;
&lt;td&gt;순서 X 데이터의 중복 X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Map&lt;/td&gt;
&lt;td&gt;순서 X 키의 중복 X 벨류의 중복 O  &lt;code class=&quot;language-text&quot;&gt;(Key,Value)형식의 집합&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[temp2]]></title><description><![CDATA[hello why2]]></description><link>https://junmock.github.io/temp2/</link><guid isPermaLink="false">https://junmock.github.io/temp2/</guid><pubDate>Fri, 01 Oct 2021 15:11:55 GMT</pubDate><content:encoded>&lt;h2&gt;hello&lt;/h2&gt;
&lt;p&gt;why2&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JPA(Java Persistence API)]]></title><description><![CDATA[JPA(Java Persistence API) 위키백과 - JPA MyBatis 와 같은 SQL맵퍼(ORM이 아니다.)를 이용한 데이터 베이스 쿼리를 사용하였을때 SQL…]]></description><link>https://junmock.github.io/JPA(Java Persistence API)/</link><guid isPermaLink="false">https://junmock.github.io/JPA(Java Persistence API)/</guid><pubDate>Mon, 24 May 2021 15:11:55 GMT</pubDate><content:encoded>&lt;h2&gt;JPA(Java Persistence API)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;위키백과 - JPA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;markdown&quot;&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;자바 퍼시스턴스 API또는 자바 지속성 API(Java Persistence API, JPA)는 자바 플랫폼 SE와 자바 플랫폼 EE를 사용하는 응용프로그램에서 관계형 데이터베이스의 관리를 표현하는 자바 API이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MyBatis 와 같은 SQL맵퍼(ORM이 아니다.)를 이용한 데이터 베이스 쿼리를 사용하였을때 SQL을 다루는 시간이 증가.&lt;/p&gt;
&lt;p&gt;테이블 모델링에 집중하고 객체를 테이블에 맞추어 데이터 전달 역할만 하는 개발을 피하자.&lt;/p&gt;
&lt;p&gt;객체 지향적인 프로그래밍을 하고 JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성.&lt;/p&gt;
&lt;p&gt;SQL에 종속정인 개발을 하지 않아도 된다.&lt;/p&gt;
&lt;h3&gt;JPA의 장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRUD쿼리를 직접 작성할 필요가없다.&lt;/li&gt;
&lt;li&gt;객체지향 프로그래밍을 쉽게 할 수 있다.
&lt;ul&gt;
&lt;li&gt;부모-자식 관계 표현&lt;/li&gt;
&lt;li&gt;1:N관계 표현&lt;/li&gt;
&lt;li&gt;상태와 행위를 한 곳에서 관리하는 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object와 RDB사이의 페러다임 불일치 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JPA의 구현체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hibernate&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[버그,오류(에러),예외,경고]]></title><description><![CDATA[…]]></description><link>https://junmock.github.io/버그,오류(에러),예외,경고/</link><guid isPermaLink="false">https://junmock.github.io/버그,오류(에러),예외,경고/</guid><pubDate>Thu, 20 May 2021 15:11:55 GMT</pubDate><content:encoded>&lt;h2&gt;버그, 오류(에러), 예외 그리고 경고&lt;/h2&gt;
&lt;p&gt;개발 혹은 사용중 생기는 빨간색 혹은 노란색 표시들이 많다.&lt;br&gt;
이러한 표시는 예외, 오류 그리고 경고를 의미한다.&lt;br&gt;
차이점과 특징에 대해서 알아보려고 한다.&lt;/p&gt;
&lt;h3&gt;버그&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;위키피디아 - 소프트웨어 버그&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;markdown&quot;&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;버그(bug)는 소프트웨어가 예상하지 못한 잘못된 결과를 내거나, 오류가 발생,착오나,오작동이 발생하는 등의 문제를 뜻한다. 버그는 프로그램의 소스코드나 설계 과정에서의 오류 때문에 발생한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;버그는 간단히 말해 프로그래머에 의한 에러이다.&lt;/p&gt;
&lt;h3&gt;오류(에러)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;표준국어대사전 - 에러&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;markdown&quot;&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;명사: 연산 처리 장치의 잘못된 동작이나 소프트웨어의 잘못 때문에 생기는, 계산값과 참값과의 오차&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오류는 대부분 실행이 불가능할 정도로 큰 문제를 뜻한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컴파일 오류 : 컴파일 시점에서 체크할 수 있는 오류로 구문 오류등이 이때 발생한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구문 오류 : 프로그래밍 언어의 문법을 지키지 않아 발생한 오류&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;런타임 오류 : 프로그램이 실행 중 생기는 문제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;논리 오류 : 잘못된 처리로 원하는 결과를 얻지 못하는 것 대부분 비정상적인 종료가 되진 않음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;예외&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;위키피디아 - 예외처리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;markdown&quot;&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;예외 처리 또는 오류 처리는 일발적인 실행의 흐름을 바구는 몇 가지 조건을 처리하도록 설계한 프로그래밍 언어의 개념이나 컴퓨터 하드웨어 구조를 말한다.
빌반적으로 프로그램이 처리되는 동안 특정한 문제가 일어났을 때 처리를 중단하고 다른처리를 하는 것을 예외 처리라고 한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예외는 실행 도중 중단될 정도로 큰 문제가 아닐 때 발생하는 것&lt;/p&gt;
&lt;p&gt;자바에서 (Un)Checked Exception&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checked Exception
&lt;ul&gt;
&lt;li&gt;반드시 예외를 처리 해야함&lt;/li&gt;
&lt;li&gt;컴파일 단계에서 확인&lt;/li&gt;
&lt;li&gt;예외 발생시 트랜잭션을 roll-back하지 않음&lt;/li&gt;
&lt;li&gt;대표적 예외
&lt;ul&gt;
&lt;li&gt;IOException&lt;/li&gt;
&lt;li&gt;SQLException&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unchecked Exception
&lt;ul&gt;
&lt;li&gt;명시적인 처리를 하지않아도 됨&lt;/li&gt;
&lt;li&gt;프로그램 실행 단계&lt;/li&gt;
&lt;li&gt;예외 발생시 트랜잭션을 roll-back함&lt;/li&gt;
&lt;li&gt;대표적 예외
&lt;ul&gt;
&lt;li&gt;RuntimeExption의 하위예외
&lt;ul&gt;
&lt;li&gt;NullPointException&lt;/li&gt;
&lt;li&gt;IndexOutOfBoundExcetion&lt;/li&gt;
&lt;li&gt;SystemException&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;경고&lt;/h3&gt;
&lt;p&gt;프로그램의 실행은 가능하지만 잠재적인 문제를 발생 할 수 있는 상태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선언한 변수등을 사용하지 않았을 경우&lt;/li&gt;
&lt;li&gt;I/O 클래스등의 사용후 close하지 않은 경우&lt;/li&gt;
&lt;li&gt;등등..&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>